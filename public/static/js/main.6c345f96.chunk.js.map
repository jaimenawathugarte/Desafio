{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","props","state","startDateInicial","Date","startDateFinal","error","isLoaded","dolar","handleChangeInicial","bind","onFormSubmitInicial","handleChangeFinal","onFormSubmitFinal","date","this","setState","e","preventDefault","console","log","Dolares","fechaInicial","target","value","fechaFinal","RecortandoAno","substring","RecortandoMes","RecortandoDia","RecortandoAnoFinal","RecortandoMesFinal","RecortandoDiaFinal","fetch","then","res","json","className","data","onSubmit","selected","onChange","name","dateFormat","map","element","index","key","Fecha","item","Valor","title","content","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.6c345f96.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport * as V from 'victory';\n\nimport logo from './logo.svg';\nimport './App.scss';\n\nimport DatePicker from \"react-datepicker\";\n \nimport \"react-datepicker/dist/react-datepicker.css\";\n\nimport { LineChart, ColumnChart  } from 'react-chartkick'\nimport 'chart.js'\n\n\n\nclass App extends Component {\n  \n  //datapiker\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      startDateInicial: new Date(),\n      startDateFinal: new Date(),\n      error: null,\n      isLoaded: false,\n       dolar: {}\n      \n      \n      \n    };\n\n\n\n  \n    \n  \n\n    \n\n\n    \n    this.handleChangeInicial = this.handleChangeInicial.bind(this);\n    this.onFormSubmitInicial = this.onFormSubmitInicial.bind(this);\n\n    this.handleChangeFinal = this.handleChangeFinal.bind(this);\n    this.onFormSubmitFinal = this.onFormSubmitFinal.bind(this);\n  }\n\n \n\n\n\n  handleChangeFinal(date) {\n    this.setState({\n      startDateFinal: date\n    })\n  }\n\n  onFormSubmitFinal(e, date) {\n    \n    this.setState({\n      startDateFinal: date\n    })\n\n    e.preventDefault();\n\n    \n   \n   \n\n\n  }\n\n  \n\n  handleChangeInicial(date) {\n    this.setState({\n      startDateInicial: date\n    })\n\n    \n\n  }\n\n  onFormSubmitInicial(e,date) {\n    \n    this.setState({\n      startDateInicial: date,\n      startDateFinal:date\n\n    })\n\n    e.preventDefault();\n    console.log(this.state.dolar.Dolares);\n    // console.log(e.target.startDateFinal.value);\n\n\n    var fechaInicial = e.target.startDateInicial.value;\n\n    var fechaFinal = e.target.startDateFinal.value\n\n    var RecortandoAno = fechaInicial.substring(0,4)\n    var RecortandoMes = fechaInicial.substring(5,7)\n    var RecortandoDia = fechaInicial.substring(8,10)\n\n    //fecha final\n\n     var RecortandoAnoFinal = fechaFinal.substring(0,4)\n     var RecortandoMesFinal = fechaFinal.substring(5,7)\n     var RecortandoDiaFinal = fechaFinal.substring(8,10)\n\n\n\n    fetch('https://api.sbif.cl/api-sbifv3/recursos_api/dolar/periodo/'+RecortandoAno+'/'+RecortandoMes+'/dias_i/'+RecortandoDia+'/'+RecortandoAnoFinal+'/'+RecortandoMesFinal+'/dias_f/'+RecortandoDiaFinal+'?apikey=9c84db4d447c80c74961a72245371245cb7ac15f&formato=json')\n      .then(res => res.json())\n      .then(\n        (dolar) => {\n          this.setState({\n            isLoaded: true,\n            dolar: dolar,\n\n          });\n        },\n        // Nota: es importante manejar errores aquí y no en \n        // un bloque catch() para que no interceptemos errores\n        // de errores reales en los componentes.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n\n\n  }\n\n\n  componentDidMount(){\n\n    \n    var fechaInicial = 2009\n\n    \n    fetch('https://api.sbif.cl/api-sbifv3/recursos_api/dolar/periodo/2020/06/dias_i/01/2020/06/dias_f/02?apikey=9c84db4d447c80c74961a72245371245cb7ac15f&formato=json')\n      .then(res => res.json())\n      .then(\n        (dolar) => {\n          this.setState({\n            isLoaded: true,\n            dolar: dolar\n          });\n        },\n        // Nota: es importante manejar errores aquí y no en \n        // un bloque catch() para que no interceptemos errores\n        // de errores reales en los componentes.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n    \n    \n\n\n  }\n\n\n\n\n  //datapiker\n\n\n  render() {\n  \n\n\n    // console.log(this.state.startDate);\n    if (!this.state.dolar.Dolares) {\n        return <span>cargando...</span>;\n    }\n\n\n\n          \n         \n\n          \n\n    return (\n\n\n\n      <div className=\"App\" >\n\n \n         <ColumnChart data={this.state.dolar.Dolares} />\n  \n\n                   \n\n\n                     \n\n       <header className=\"App-header\">\n        \n         <ul>\n\n           <li> Home </li>\n           <li> Blog </li>\n           <li> Diario Financiero </li>\n           <li></li>\n         </ul>\n\n       </header>\n\n       <main>\n\n          \n\n{/*          {this.state.dolar.Dolares.map((element, index) => { <span key={index} >{element}</span>})}\n*/}\n         <div className=\"contenedor\">\n            \n            <div className=\"fechainicial\">\n              \n              <form onSubmit={ this.onFormSubmitInicial }>\n                <div className=\"form-group\">\n\n                    <div>\n                      <h2> Fecha Inicial </h2>\n                      <DatePicker\n                          selected={ this.state.startDateInicial }\n                          onChange={ this.handleChangeInicial }\n                          name=\"startDateInicial\"\n                          dateFormat=\"yyyy-MM-dd\"\n                      />\n                    </div>\n                    \n                    <div>\n\n                      <h2> Fecha Final </h2>\n                      <DatePicker\n                        selected={ this.state.startDateFinal }\n                        onChange={ this.handleChangeFinal }\n                        name=\"startDateFinal\"\n                        dateFormat=\"yyyy-MM-dd\"\n                      />\n\n                    </div>\n\n                </div>\n\n                <button className=\"btn btn-primary\">Mostrar Datos</button>\n\n              </form>\n\n               \n\n            </div>\n\n\n         </div>\n\n          <div className=\"valor_dolar\"> \n                  \n                  <span>   \n                    Fecha <br/>\n                    {/*<b>{this.state.dolar.Dolares[0].Valor}</b> */}\n                    {this.state.dolar.Dolares.map((element, index) => \n                      \n                      <b key={index}>\n                          \n                          {element.Fecha}\n\n                      </b>\n\n\n                      )\n\n                    }\n\n                    {this.state.dolar.Dolares.map((item) => \n    <article key={item.Valor}>\n      <h3>{item.title}</h3>\n      <p>{item.content}</p>\n    </article>\n  )}\n                  </span>\n\n                  <span>   \n                    Valor <br/>\n                    {/*<b>{this.state.dolar.Dolares[0].Valor}</b> */}\n                    {this.state.dolar.Dolares.map((element, index) => \n                      \n                      <b key={index}>\n                          \n                          {element.Valor}\n\n                      </b>\n\n\n                      )\n\n                    }\n                  </span>\n\n\n                 \n                  \n\n          \n                  \n                  {/*<span>\n                  Fecha valor del dolar: <br/>\n                  <b> {this.state.dolar.Dolares[0].Fecha} </b>\n                  </span>*/}\n\n                </div>\n        \n\n    {/*  <div className=\"contenedor\">\n        \n        <div>\n            \n        </div>\n\n      </div>*/}\n       </main>\n\n       <footer>\n\n       </footer>\n\n     </div>\n    )\n\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}